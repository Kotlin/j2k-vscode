{"java_code": "/*\n * Copyright 2012-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.samples.petclinic.owner;\n\nimport java.util.List;\nimport java.util.Optional;\n\nimport jakarta.annotation.Nonnull;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\n\n/**\n * Repository class for <code>Owner</code> domain objects. All method names are compliant\n * with Spring Data naming conventions so this interface can easily be extended for Spring\n * Data. See:\n * https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#repositories.query-methods.query-creation\n *\n * @author Ken Krebs\n * @author Juergen Hoeller\n * @author Sam Brannen\n * @author Michael Isvy\n * @author Wick Dynex\n */\npublic interface OwnerRepository extends JpaRepository<Owner, Integer> {\n\n\t/**\n\t * Retrieve {@link Owner}s from the data store by last name, returning all owners\n\t * whose last name <i>starts</i> with the given name.\n\t * @param lastName Value to search for\n\t * @return a Collection of matching {@link Owner}s (or an empty Collection if none\n\t * found)\n\t */\n\tPage<Owner> findByLastNameStartingWith(String lastName, Pageable pageable);\n\n\t/**\n\t * Retrieve an {@link Owner} from the data store by id.\n\t * <p>\n\t * This method returns an {@link Optional} containing the {@link Owner} if found. If\n\t * no {@link Owner} is found with the provided id, it will return an empty\n\t * {@link Optional}.\n\t * </p>\n\t * @param id the id to search for\n\t * @return an {@link Optional} containing the {@link Owner} if found, or an empty\n\t * {@link Optional} if not found.\n\t * @throws IllegalArgumentException if the id is null (assuming null is not a valid\n\t * input for id)\n\t */\n\tOptional<Owner> findById(@Nonnull Integer id);\n\n}", "kotlin_code": "/*\n * Copyright 2012-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.samples.petclinic.owner;\n\nimport java.util.List;\nimport java.util.Optional;\n\nimport jakarta.annotation.Nonnull;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.stereotype.Repository;\n\n/**\n * Repository class for <code>Owner</code> domain objects. All method names are compliant\n * with Spring Data naming conventions so this interface can easily be extended for Spring\n * Data. See:\n * https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#repositories.query-methods.query-creation\n *\n * @author Ken Krebs\n * @author Juergen Hoeller\n * @author Sam Brannen\n * @author Michael Isvy\n * @author Wick Dynex\n */\n@Repository\ninterface OwnerRepository : JpaRepository<Owner, Int> {\n    /**\n     * Retrieve {@link Owner}s from the data store by last name, returning all owners\n     * whose last name <i>starts</i> with the given name.\n     * @param lastName Value to search for\n     * @return a Collection of matching {@link Owner}s (or an empty Collection if none\n     * found)\n     */\n    fun findByLastNameStartingWith(lastName: String, pageable: Pageable?): Page<Owner>\n}", "rationale": ""}
{"java_code": "/*\n * Copyright 2012-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.samples.petclinic.vet;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport jakarta.xml.bind.annotation.XmlElement;\nimport jakarta.xml.bind.annotation.XmlRootElement;\n\n/**\n * Simple domain object representing a list of veterinarians. Mostly here to be used for\n * the 'vets' {@link org.springframework.web.servlet.view.xml.MarshallingView}.\n *\n * @author Arjen Poutsma\n */\n@XmlRootElement\npublic class Vets {\n\n\tprivate List<Vet> vets;\n\n\t@XmlElement\n\tpublic List<Vet> getVetList() {\n\t\tif (vets == null) {\n\t\t\tvets = new ArrayList<>();\n\t\t}\n\t\treturn vets;\n\t}\n\n}", "kotlin_code": "/*\n * Copyright 2012-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.samples.petclinic.vet\n\nimport jakarta.xml.bind.annotation.XmlElement\nimport jakarta.xml.bind.annotation.XmlRootElement\n\n/**\n * Simple domain object representing a list of veterinarians. Mostly here to be used for\n * the 'vets' {@link org.springframework.web.servlet.view.xml.MarshallingView}.\n *\n * @author Arjen Poutsma\n */\n@XmlRootElement\ndata class Vets(\n    @field:XmlElement\n    var vetList: MutableList<Vet> = mutableListOf<Vet>()\n)", "rationale": ""}
{"java_code": "/*\n * Copyright 2012-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.samples.petclinic.vet;\n\nimport java.util.Comparator;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\nimport org.springframework.samples.petclinic.model.NamedEntity;\nimport org.springframework.samples.petclinic.model.Person;\n\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.FetchType;\nimport jakarta.persistence.JoinColumn;\nimport jakarta.persistence.JoinTable;\nimport jakarta.persistence.ManyToMany;\nimport jakarta.persistence.Table;\nimport jakarta.xml.bind.annotation.XmlElement;\n\n/**\n * Simple JavaBean domain object representing a veterinarian.\n *\n * @author Ken Krebs\n * @author Juergen Hoeller\n * @author Sam Brannen\n * @author Arjen Poutsma\n */\n@Entity\n@Table(name = \"vets\")\npublic class Vet extends Person {\n\n\t@ManyToMany(fetch = FetchType.EAGER)\n\t@JoinTable(name = \"vet_specialties\", joinColumns = @JoinColumn(name = \"vet_id\"),\n\t\t\tinverseJoinColumns = @JoinColumn(name = \"specialty_id\"))\n\tprivate Set<Specialty> specialties;\n\n\tprotected Set<Specialty> getSpecialtiesInternal() {\n\t\tif (this.specialties == null) {\n\t\t\tthis.specialties = new HashSet<>();\n\t\t}\n\t\treturn this.specialties;\n\t}\n\n\t@XmlElement\n\tpublic List<Specialty> getSpecialties() {\n\t\treturn getSpecialtiesInternal().stream()\n\t\t\t.sorted(Comparator.comparing(NamedEntity::getName))\n\t\t\t.collect(Collectors.toList());\n\t}\n\n\tpublic int getNrOfSpecialties() {\n\t\treturn getSpecialtiesInternal().size();\n\t}\n\n\tpublic void addSpecialty(Specialty specialty) {\n\t\tgetSpecialtiesInternal().add(specialty);\n\t}\n\n}", "kotlin_code": "/*\n * Copyright 2012-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.samples.petclinic.vet\n\nimport java.util.HashSet\nimport java.util.Comparator\n\nimport org.springframework.samples.petclinic.model.NamedEntity;\nimport org.springframework.samples.petclinic.model.Person;\n\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.FetchType;\nimport jakarta.persistence.JoinColumn;\nimport jakarta.persistence.JoinTable;\nimport jakarta.persistence.ManyToMany;\nimport jakarta.persistence.Table;\nimport jakarta.xml.bind.annotation.XmlElement;\n\n/**\n * Simple JavaBean domain object representing a veterinarian.\n *\n * @author Ken Krebs\n * @author Juergen Hoeller\n * @author Sam Brannen\n * @author Arjen Poutsma\n */\n@Entity\n@Table(name = \"vets\")\nopen class Vet : Person() {\n\n    @ManyToMany(fetch = FetchType.EAGER)\n    @JoinTable(\n        name = \"vet_specialties\",\n        joinColumns = [JoinColumn(name = \"vet_id\")],\n        inverseJoinColumns = [JoinColumn(name = \"specialty_id\")]\n    )\n    private val specialtiesInternal: MutableSet<Specialty> = HashSet()\n\n    @get:XmlElement\n    val specialties: List<Specialty>\n        get() = specialtiesInternal.sortedBy { it.name }\n\n    val nrOfSpecialties: Int\n        get() = specialtiesInternal.size\n\n    fun addSpecialty(specialty: Specialty) = specialtiesInternal.add(specialty)\n}", "rationale": ""}
{"java_code": "/*\n * Copyright 2012-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.samples.petclinic.vet;\n\nimport java.util.List;\n\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\n/**\n * @author Juergen Hoeller\n * @author Mark Fisher\n * @author Ken Krebs\n * @author Arjen Poutsma\n */\n@Controller\nclass VetController {\n\n\tprivate final VetRepository vetRepository;\n\n\tpublic VetController(VetRepository vetRepository) {\n\t\tthis.vetRepository = vetRepository;\n\t}\n\n\t@GetMapping(\"/vets.html\")\n\tpublic String showVetList(@RequestParam(defaultValue = \"1\") int page, Model model) {\n\t\t// Here we are returning an object of type 'Vets' rather than a collection of Vet\n\t\t// objects so it is simpler for Object-Xml mapping\n\t\tVets vets = new Vets();\n\t\tPage<Vet> paginated = findPaginated(page);\n\t\tvets.getVetList().addAll(paginated.toList());\n\t\treturn addPaginationModel(page, paginated, model);\n\t}\n\n\tprivate String addPaginationModel(int page, Page<Vet> paginated, Model model) {\n\t\tList<Vet> listVets = paginated.getContent();\n\t\tmodel.addAttribute(\"currentPage\", page);\n\t\tmodel.addAttribute(\"totalPages\", paginated.getTotalPages());\n\t\tmodel.addAttribute(\"totalItems\", paginated.getTotalElements());\n\t\tmodel.addAttribute(\"listVets\", listVets);\n\t\treturn \"vets/vetList\";\n\t}\n\n\tprivate Page<Vet> findPaginated(int page) {\n\t\tint pageSize = 5;\n\t\tPageable pageable = PageRequest.of(page - 1, pageSize);\n\t\treturn vetRepository.findAll(pageable);\n\t}\n\n\t@GetMapping({ \"/vets\" })\n\tpublic @ResponseBody Vets showResourcesVetList() {\n\t\t// Here we are returning an object of type 'Vets' rather than a collection of Vet\n\t\t// objects so it is simpler for JSon/Object mapping\n\t\tVets vets = new Vets();\n\t\tvets.getVetList().addAll(this.vetRepository.findAll());\n\t\treturn vets;\n\t}\n\n}", "kotlin_code": "/*\n * Copyright 2012-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.samples.petclinic.vet\n\nimport java.util.List\nimport org.springframework.data.domain.Page\nimport org.springframework.data.domain.PageRequest\nimport org.springframework.data.domain.Pageable\nimport org.springframework.stereotype.Controller\nimport org.springframework.ui.Model\nimport org.springframework.web.bind.annotation.GetMapping\nimport org.springframework.web.bind.annotation.RequestParam\nimport org.springframework.web.bind.annotation.ResponseBody\n\n/**\n * @author Juergen Hoeller\n * @author Mark Fisher\n * @author Ken Krebs\n * @author Arjen Poutsma\n */\n@Controller\nclass VetController(private val vetRepository: VetRepository) {\n\n    @GetMapping(\"/vets.html\")\n    fun showVetList(@RequestParam(\"page\", defaultValue = \"1\") page: Int, model: Model): String {\n        // Here we are returning an object of type 'Vets' rather than a collection of Vet\n        // objects so it is simpler for Object-Xml mapping\n        val vets = Vets()\n        val paginated = findPaginated(page)\n        vets.vetList.addAll(paginated.toList())\n        return addPaginationModel(page, paginated, model)\n    }\n\n    private fun addPaginationModel(page: Int, paginated: Page<Vet>, model: Model): String {\n        val listVets = paginated.content\n        model.addAttribute(\"currentPage\", page)\n        model.addAttribute(\"totalPages\", paginated.totalPages)\n        model.addAttribute(\"totalItems\", paginated.totalElements)\n        model.addAttribute(\"listVets\", listVets)\n        return \"vets/vetList\"\n    }\n\n    private fun findPaginated(page: Int): Page<Vet> {\n        val pageSize = 5\n        val pageable = PageRequest.of(page - 1, pageSize)\n        return vetRepository.findAll(pageable)\n    }\n\n    @GetMapping(\"/vets\")\n    fun showResourcesVetList(): Vets {\n        // Here we are returning an object of type 'Vets' rather than a collection of Vet\n        // objects so it is simpler for JSon/Object mapping\n        val vets = Vets()\n        vets.vetList.addAll(vetRepository.findAll())\n        return vets\n    }\n}", "rationale": ""}
{"java_code": "/*\n * Copyright 2012-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.samples.petclinic.owner;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.springframework.core.style.ToStringCreator;\nimport org.springframework.samples.petclinic.model.Person;\nimport org.springframework.util.Assert;\n\nimport jakarta.persistence.CascadeType;\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.FetchType;\nimport jakarta.persistence.JoinColumn;\nimport jakarta.persistence.OneToMany;\nimport jakarta.persistence.OrderBy;\nimport jakarta.persistence.Table;\nimport jakarta.validation.constraints.Pattern;\nimport jakarta.validation.constraints.NotBlank;\n\n/**\n * Simple JavaBean domain object representing an owner.\n *\n * @author Ken Krebs\n * @author Juergen Hoeller\n * @author Sam Brannen\n * @author Michael Isvy\n * @author Oliver Drotbohm\n * @author Wick Dynex\n */\n@Entity\n@Table(name = \"owners\")\npublic class Owner extends Person {\n\n\t@Column(name = \"address\")\n\t@NotBlank\n\tprivate String address;\n\n\t@Column(name = \"city\")\n\t@NotBlank\n\tprivate String city;\n\n\t@Column(name = \"telephone\")\n\t@NotBlank\n\t@Pattern(regexp = \"\\\\d{10}\", message = \"{telephone.invalid}\")\n\tprivate String telephone;\n\n\t@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER)\n\t@JoinColumn(name = \"owner_id\")\n\t@OrderBy(\"name\")\n\tprivate final List<Pet> pets = new ArrayList<>();\n\n\tpublic String getAddress() {\n\t\treturn this.address;\n\t}\n\n\tpublic void setAddress(String address) {\n\t\tthis.address = address;\n\t}\n\n\tpublic String getCity() {\n\t\treturn this.city;\n\t}\n\n\tpublic void setCity(String city) {\n\t\tthis.city = city;\n\t}\n\n\tpublic String getTelephone() {\n\t\treturn this.telephone;\n\t}\n\n\tpublic void setTelephone(String telephone) {\n\t\tthis.telephone = telephone;\n\t}\n\n\tpublic List<Pet> getPets() {\n\t\treturn this.pets;\n\t}\n\n\tpublic void addPet(Pet pet) {\n\t\tif (pet.isNew()) {\n\t\t\tgetPets().add(pet);\n\t\t}\n\t}\n\n\t/**\n\t * Return the Pet with the given name, or null if none found for this Owner.\n\t * @param name to test\n\t * @return the Pet with the given name, or null if no such Pet exists for this Owner\n\t */\n\tpublic Pet getPet(String name) {\n\t\treturn getPet(name, false);\n\t}\n\n\t/**\n\t * Return the Pet with the given id, or null if none found for this Owner.\n\t * @param id to test\n\t * @return the Pet with the given id, or null if no such Pet exists for this Owner\n\t */\n\tpublic Pet getPet(Integer id) {\n\t\tfor (Pet pet : getPets()) {\n\t\t\tif (!pet.isNew()) {\n\t\t\t\tInteger compId = pet.getId();\n\t\t\t\tif (compId.equals(id)) {\n\t\t\t\t\treturn pet;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Return the Pet with the given name, or null if none found for this Owner.\n\t * @param name to test\n\t * @param ignoreNew whether to ignore new pets (pets that are not saved yet)\n\t * @return the Pet with the given name, or null if no such Pet exists for this Owner\n\t */\n\tpublic Pet getPet(String name, boolean ignoreNew) {\n\t\tfor (Pet pet : getPets()) {\n\t\t\tString compName = pet.getName();\n\t\t\tif (compName != null && compName.equalsIgnoreCase(name)) {\n\t\t\t\tif (!ignoreNew || !pet.isNew()) {\n\t\t\t\t\treturn pet;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn new ToStringCreator(this).append(\"id\", this.getId())\n\t\t\t.append(\"new\", this.isNew())\n\t\t\t.append(\"lastName\", this.getLastName())\n\t\t\t.append(\"firstName\", this.getFirstName())\n\t\t\t.append(\"address\", this.address)\n\t\t\t.append(\"city\", this.city)\n\t\t\t.append(\"telephone\", this.telephone)\n\t\t\t.toString();\n\t}\n\n\t/**\n\t * Adds the given {@link Visit} to the {@link Pet} with the given identifier.\n\t * @param petId the identifier of the {@link Pet}, must not be {@literal null}.\n\t * @param visit the visit to add, must not be {@literal null}.\n\t */\n\tpublic void addVisit(Integer petId, Visit visit) {\n\n\t\tAssert.notNull(petId, \"Pet identifier must not be null!\");\n\t\tAssert.notNull(visit, \"Visit must not be null!\");\n\n\t\tPet pet = getPet(petId);\n\n\t\tAssert.notNull(pet, \"Invalid Pet identifier!\");\n\n\t\tpet.addVisit(visit);\n\t}\n\n}", "kotlin_code": "/*\n * Copyright 2012-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.samples.petclinic.owner;\n\nimport org.springframework.core.style.ToStringCreator;\nimport org.springframework.samples.petclinic.model.Person;\nimport org.springframework.util.Assert;\n\nimport jakarta.persistence.CascadeType;\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.FetchType;\nimport jakarta.persistence.JoinColumn;\nimport jakarta.persistence.OneToMany;\nimport jakarta.persistence.OrderBy;\nimport jakarta.persistence.Table;\nimport jakarta.validation.constraints.Pattern;\nimport jakarta.validation.constraints.NotBlank;\n\n/**\n * Simple JavaBean domain object representing an owner.\n *\n * @author Ken Krebs\n * @author Juergen Hoeller\n * @author Sam Brannen\n * @author Michael Isvy\n * @author Oliver Drotbohm\n * @author Wick Dynex\n */\n@Entity\n@Table(name = \"owners\")\nopen class Owner(\n    @Column(name = \"address\")\n    @get:NotBlank\n    var address: String,\n\n    @Column(name = \"city\")\n    @get:NotBlank\n    var city: String,\n\n    @Column(name = \"telephone\")\n    @get:NotBlank\n    @get:Pattern(regexp = \"\\\\d{10}\", message = \"{telephone.invalid}\")\n    var telephone: String,\n\n    @OneToMany(cascade = [CascadeType.ALL], fetch = FetchType.EAGER)\n    @JoinColumn(name = \"owner_id\")\n    @get:OrderBy(\"name\")\n    val pets: MutableList<Pet> = ArrayList()\n) : Person() {\n    \n    constructor() : this(\"\", \"\", \"\", ArrayList())\n\n    fun addPet(pet: Pet) {\n        if (pet.isNew()) {\n            pets.add(pet)\n        }\n    }\n\n    /**\n     * Return the Pet with the given name, or null if none found for this Owner.\n     * @param name to test\n     * @return the Pet with the given name, or null if no such Pet exists for this Owner\n     */\n    fun getPet(name: String): Pet? {\n        for (pet in pets) {\n            val compName = pet.getName()\n            if (compName != null && compName.equals(name, ignoreCase = true)) {\n                return pet\n            }\n        }\n        return null\n    }\n\n    /**\n     * Return the Pet with the given id, or null if none found for this Owner.\n     * @param id to test\n     * @return the Pet with the given id, or null if no such Pet exists for this Owner\n     */\n    fun getPet(id: Int): Pet? {\n        for (pet in pets) {\n            val compId = pet.getId()\n            if (compId != null && compId == id) {\n                return pet\n            }\n        }\n        return null\n    }\n\n    /**\n     * Return the Pet with the given name, or null if none found for this Owner.\n     * @param name to test\n     * @param ignoreNew whether to ignore new pets (pets that are not saved yet)\n     * @return the Pet with the given name, or null if no such Pet exists for this Owner\n     */\n    fun getPet(name: String, ignoreNew: Boolean): Pet? {\n        for (pet in pets) {\n            val compName = pet.getName()\n            if (compName != null && compName.equals(name, ignoreCase = true)) {\n                if (!ignoreNew || !pet.isNew()) {\n                    return pet\n                }\n            }\n        }\n        return null\n    }\n\n    override fun toString(): String {\n        return ToStringCreator(this).append(\"id\", this.getId()).append(\"new\", this.isNew()).append(\"lastName\", this.getLastName()).append(\"firstName\", this.getFirstName()).append(\"address\", this.address).append(\"city\", this.city).append(\"telephone\", this.telephone).toString()\n    }\n\n    /**\n     * Adds the given {@link Visit} to the {@link Pet} with the given identifier.\n     * @param petId the identifier of the {@link Pet}, must not be {@literal null}.\n     * @param visit the visit to add, must not be {@literal null}.\n     */\n    fun addVisit(petId: Int, visit: Visit) {\n        Assert.notNull(petId, \"Pet identifier must not be null!\")\n        Assert.notNull(visit, \"Visit must not be null!\")\n        val pet = getPet(petId)!!\n        Assert.notNull(pet, \"Invalid Pet identifier!\")\n        pet.addVisit(visit)\n    }\n}\n", "rationale": ""}
{"java_code": "/*\n * Copyright 2012-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.samples.petclinic.owner;\n\nimport java.util.List;\nimport java.util.Optional;\n\nimport jakarta.annotation.Nonnull;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\n\n/**\n * Repository class for <code>PetType</code> domain objects.\n *\n * @author Patrick Baumgartner\n */\n\npublic interface PetTypeRepository extends JpaRepository<PetType, Integer> {\n\n\t/**\n\t * Retrieve all {@link PetType}s from the data store.\n\t * @return a Collection of {@link PetType}s.\n\t */\n\t@Query(\"SELECT ptype FROM PetType ptype ORDER BY ptype.name\")\n\tList<PetType> findPetTypes();\n\n}", "kotlin_code": "/*\n * Copyright 2012-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.samples.petclinic.owner\n\nimport java.util.List\nimport java.util.Optional\nimport jakarta.annotation.Nonnull\nimport org.springframework.data.domain.Page\nimport org.springframework.data.domain.Pageable\nimport org.springframework.data.jpa.repository.JpaRepository\nimport org.springframework.data.jpa.repository.Query\nimport org.springframework.samples.petclinic.owner.PetType\n\n/**\n * Repository class for <code>PetType</code> domain objects.\n *\n * @author Patrick Baumgartner\n */\n\ninterface PetTypeRepository : JpaRepository<PetType, Int> {\n    /**\n     * Retrieve all {@link PetType}s from the data store.\n     * @return a Collection of {@link PetType}s.\n     */\n    @Query(\"SELECT ptype FROM PetType ptype ORDER BY ptype.name\")\n    fun findPetTypes(): List<PetType>\n}", "rationale": ""}
{"java_code": "/*\n * Copyright 2012-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.samples.petclinic.vet;\n\nimport org.springframework.samples.petclinic.model.NamedEntity;\n\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.Table;\n\n/**\n * Models a {@link Vet Vet's} specialty (for example, dentistry).\n *\n * @author Juergen Hoeller\n */\n@Entity\n@Table(name = \"specialties\")\npublic class Specialty extends NamedEntity {\n\n}", "kotlin_code": "/*\n * Copyright 2012-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.samples.petclinic.vet\n\nimport org.springframework.samples.petclinic.model.NamedEntity;\n\nimport jakarta.persistence.Entity\nimport jakarta.persistence.Table\n\n/**\n * Models a {@link Vet Vet's} specialty (for example, dentistry).\n *\n * @author Juergen Hoeller\n */\n@Entity\n@Table(name = \"specialties\")\nclass Specialty : NamedEntity() {\n\n}", "rationale": ""}
{"java_code": "/*\n * Copyright 2012-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.samples.petclinic.owner;\n\nimport java.time.LocalDate;\n\nimport org.springframework.format.annotation.DateTimeFormat;\nimport org.springframework.samples.petclinic.model.BaseEntity;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.Table;\nimport jakarta.validation.constraints.NotBlank;\n\n/**\n * Simple JavaBean domain object representing a visit.\n *\n * @author Ken Krebs\n * @author Dave Syer\n */\n@Entity\n@Table(name = \"visits\")\npublic class Visit extends BaseEntity {\n\n\t@Column(name = \"visit_date\")\n\t@DateTimeFormat(pattern = \"yyyy-MM-dd\")\n\tprivate LocalDate date;\n\n\t@NotBlank\n\tprivate String description;\n\n\t/**\n\t * Creates a new instance of Visit for the current date\n\t */\n\tpublic Visit() {\n\t\tthis.date = LocalDate.now();\n\t}\n\n\tpublic LocalDate getDate() {\n\t\treturn this.date;\n\t}\n\n\tpublic void setDate(LocalDate date) {\n\t\tthis.date = date;\n\t}\n\n\tpublic String getDescription() {\n\t\treturn this.description;\n\t}\n\n\tpublic void setDescription(String description) {\n\t\tthis.description = description;\n\t}\n\n}", "kotlin_code": "/*\n * Copyright 2012-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.samples.petclinic.owner\n\nimport java.time.LocalDate\n\nimport org.springframework.format.annotation.DateTimeFormat;\nimport org.springframework.samples.petclinic.model.BaseEntity;\n\nimport jakarta.persistence.Column\nimport jakarta.persistence.Entity\nimport jakarta.persistence.Table\nimport jakarta.validation.constraints.NotBlank\n\n/**\n * Simple JavaBean domain object representing a visit.\n *\n * @author Ken Krebs\n * @author Dave Syer\n */\n@Entity\n@Table(name = \"visits\")\ndata class Visit(\n    @get:Column(name = \"visit_date\")\n    @set:DateTimeFormat(pattern = \"yyyy-MM-dd\")\n    var date: LocalDate,\n\n    @get:NotBlank\n    var description: String\n) : BaseEntity() {\n\n    /**\n     * Creates a new instance of Visit for the current date\n     */\n    constructor() : this(LocalDate.now(), \"\")\n}", "rationale": ""}
{"java_code": "/*\n * Copyright 2012-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.samples.petclinic.system;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.GetMapping;\n\n/**\n * Controller used to showcase what happens when an exception is thrown\n *\n * @author Michael Isvy\n * <p/>\n * Also see how a view that resolves to \"error\" has been added (\"error.html\").\n */\n@Controller\nclass CrashController {\n\n\t@GetMapping(\"/oups\")\n\tpublic String triggerException() {\n\t\tthrow new RuntimeException(\n\t\t\t\t\"Expected: controller used to showcase what \" + \"happens when an exception is thrown\");\n\t}\n\n}", "kotlin_code": "/*\n * Copyright 2012-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.samples.petclinic.system\n\nimport org.springframework.stereotype.Controller\nimport org.springframework.web.bind.annotation.GetMapping\n\n/**\n * Controller used to showcase what happens when an exception is thrown\n *\n * @author Michael Isvy\n * <p/>\n * Also see how a view that resolves to \"error\" has been added (\"error.html\").\n */\n@Controller\nclass CrashController {\n\n    @GetMapping(\"/oups\")\n    fun triggerException(): String {\n        throw RuntimeException(\"Expected: controller used to showcase what happens when an exception is thrown\")\n    }\n}", "rationale": ""}
{"java_code": "/*\n * Copyright 2012-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.samples.petclinic.owner;\n\nimport org.springframework.format.Formatter;\nimport org.springframework.stereotype.Component;\n\nimport java.text.ParseException;\nimport java.util.Collection;\nimport java.util.Locale;\n\n/**\n * Instructs Spring MVC on how to parse and print elements of type 'PetType'. Starting\n * from Spring 3.0, Formatters have come as an improvement in comparison to legacy\n * PropertyEditors. See the following links for more details: - The Spring ref doc:\n * https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#format\n *\n * @author Mark Fisher\n * @author Juergen Hoeller\n * @author Michael Isvy\n */\n@Component\npublic class PetTypeFormatter implements Formatter<PetType> {\n\n\tprivate final PetTypeRepository types;\n\n\tpublic PetTypeFormatter(PetTypeRepository types) {\n\t\tthis.types = types;\n\t}\n\n\t@Override\n\tpublic String print(PetType petType, Locale locale) {\n\t\treturn petType.getName();\n\t}\n\n\t@Override\n\tpublic PetType parse(String text, Locale locale) throws ParseException {\n\t\tCollection<PetType> findPetTypes = this.types.findPetTypes();\n\t\tfor (PetType type : findPetTypes) {\n\t\t\tif (type.getName().equals(text)) {\n\t\t\t\treturn type;\n\t\t\t}\n\t\t}\n\t\tthrow new ParseException(\"type not found: \" + text, 0);\n\t}\n\n}", "kotlin_code": "/*\n * Copyright 2012-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.samples.petclinic.owner\n\nimport org.springframework.format.Formatter\nimport org.springframework.stereotype.Component\n\nimport java.text.ParseException;\nimport java.util.Collection;\nimport java.util.Locale;\n\n/**\n * Instructs Spring MVC on how to parse and print elements of type 'PetType'. Starting\n * from Spring 3.0, Formatters have come as an improvement in comparison to legacy\n * PropertyEditors. See the following links for more details: - The Spring ref doc:\n * https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#format\n *\n * @author Mark Fisher\n * @author Juergen Hoeller\n * @author Michael Isvy\n */\n@Component\nclass PetTypeFormatter(private val types: PetTypeRepository) : Formatter<PetType> {\n    override fun print(petType: PetType, locale: Locale): String = petType.name\n\n    override fun parse(text: String, locale: Locale): PetType {\n        val findPetTypes = types.findPetTypes()\n        for (type in findPetTypes) {\n            if (type.name == text) return type\n        }\n        throw ParseException(\"type not found: $text\", 0)\n    }\n}", "rationale": ""}
{"java_code": "/*\n * Copyright 2012-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.samples.petclinic.owner;\n\nimport org.springframework.util.StringUtils;\nimport org.springframework.validation.Errors;\nimport org.springframework.validation.Validator;\n\n/**\n * <code>Validator</code> for <code>Pet</code> forms.\n * <p>\n * We're not using Bean Validation annotations here because it is easier to define such\n * validation rule in Java.\n * </p>\n *\n * @author Ken Krebs\n * @author Juergen Hoeller\n */\npublic class PetValidator implements Validator {\n\n\tprivate static final String REQUIRED = \"required\";\n\n\t@Override\n\tpublic void validate(Object obj, Errors errors) {\n\t\tPet pet = (Pet) obj;\n\t\tString name = pet.getName();\n\t\t// name validation\n\t\tif (!StringUtils.hasText(name)) {\n\t\t\terrors.rejectValue(\"name\", REQUIRED, REQUIRED);\n\t\t}\n\n\t\t// type validation\n\t\tif (pet.isNew() && pet.getType() == null) {\n\t\t\terrors.rejectValue(\"type\", REQUIRED, REQUIRED);\n\t\t}\n\n\t\t// birth date validation\n\t\tif (pet.getBirthDate() == null) {\n\t\t\terrors.rejectValue(\"birthDate\", REQUIRED, REQUIRED);\n\t\t}\n\t}\n\n\t/**\n\t * This Validator validates *just* Pet instances\n\t */\n\t@Override\n\tpublic boolean supports(Class<?> clazz) {\n\t\treturn Pet.class.isAssignableFrom(clazz);\n\t}\n\n}", "kotlin_code": "/*\n * Copyright 2012-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.samples.petclinic.owner;\n\nimport org.springframework.util.StringUtils;\nimport org.springframework.validation.Errors;\nimport org.springframework.validation.Validator;\n\n/**\n * <code>Validator</code> for <code>Pet</code> forms.\n * <p>\n * We're not using Bean Validation annotations here because it is easier to define such\n * validation rule in Java.\n * </p>\n *\n * @author Ken Krebs\n * @author Juergen Hoeller\n */\nclass PetValidator : Validator {\n\n    private val REQUIRED = \"required\"\n\n    override fun validate(obj: Any, errors: Errors) {\n        val pet = obj as Pet\n        val name = pet.name\n        // name validation\n        if (!StringUtils.hasText(name)) {\n            errors.rejectValue(\"name\", REQUIRED, REQUIRED)\n        }\n\n        // type validation\n        if (pet.isNew() && pet.type == null) {\n            errors.rejectValue(\"type\", REQUIRED, REQUIRED)\n        }\n\n        // birth date validation\n        if (pet.birthDate == null) {\n            errors.rejectValue(\"birthDate\", REQUIRED, REQUIRED)\n        }\n    }\n\n    /**\n     * This Validator validates *just* Pet instances\n     */\n    override fun supports(clazz: Class<*>): Boolean {\n        return Pet::class.java.isAssignableFrom(clazz)\n    }\n}", "rationale": ""}
{"java_code": "/*\n * Copyright 2012-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.samples.petclinic.owner;\n\nimport org.springframework.samples.petclinic.model.NamedEntity;\n\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.Table;\n\n/**\n * @author Juergen Hoeller Can be Cat, Dog, Hamster...\n */\n@Entity\n@Table(name = \"types\")\npublic class PetType extends NamedEntity {\n\n}", "kotlin_code": "/*\n * Copyright 2012-2025 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.samples.petclinic.owner\n\nimport org.springframework.samples.petclinic.model.NamedEntity\nimport jakarta.persistence.Entity\nimport jakarta.persistence.Table\n\n/**\n * @author Juergen Hoeller Can be Cat, Dog, Hamster...\n */\n@Entity\n@Table(name = \"types\")\nopen class PetType : NamedEntity() {\n\n}", "rationale": ""}
